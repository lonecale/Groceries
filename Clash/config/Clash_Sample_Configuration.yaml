# mihomo 配置
# 日期：2024-8-22 23:00
# 适用版本：所有使用 mihomo 核心的程序

# HTTP(S) 代理服务器端口
port: 7890
# SOCKS5 代理端口
socks-port: 7891
# 混合端口，HTTP和SOCKS5用一个端口
mixed-port: 7892
# 透明代理端口，用于 Linux 和 MacOS
redir-port: 7893
# Transparent proxy server port for Linux (TProxy TCP and TProxy UDP)
tproxy-port: 7894

# 允许局域网的连接（可用来共享代理）
allow-lan: true
# 是否允许内核接受 IPv6 流量
ipv6: false
# 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）/ script (脚本)
mode: rule
# 设置日志输出级别: silent/error/warning/info/debug
log-level: info
# 是否允许 UDP 通过代理，默认为 false
udp: true

# 开启统一延迟时，会进行两次延迟测试，以消除连接握手等带来的不同类型节点的延迟差异，可选值 true/false
unified-delay: true 
# TCP 并发，可选值 true/false
tcp-concurrent: true
# 控制 Clash 发出 TCP Keep Alive 包的间隔，减少移动设备耗电问题的临时措施。
keep-alive-interval: 1800
# 控制是否让 Clash 去匹配进程，always 开启，强制匹配所有进程，strict 默认，由 Clash 判断是否开启，off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict
# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint，目前支持开启 TLS 传输的 TCP/grpc/WS/HTTP , 支持协议有 VLESS,Vmess 和 trojan
# 可选："chrome", "firefox", "safari", "iOS", "android", "edge", "360"," qq", "random"
# 若选择 "random", 则按 Cloudflare Radar 数据按概率生成一个现代浏览器指纹。
global-client-fingerprint: chrome

# 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核，API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP
external-controller: 0.0.0.0:9090
# 可以将静态网页资源 (比如 Clash-dashboard) 运行在 Clash API, 路径为 API 地址/ui，可以为绝对路径，或者 Clash 工作目录的相对路径
# external-ui: ui
# 自定义外部用户界面下载地址
# external-ui-url: 'https://mirror.ghproxy.com/https://github.com/MetaCubeX/Yacd-meta/archive/gh-pages.zip'
# 自定义 API 的访问密钥
secret: ''

# 更改geoip使用文件,mmdb或者dat,可选 true/false,true为dat,此项有默认值 false
geodata-mode: false
# GEO 文件加载模式，standard：标准加载器 memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)
geodata-loader: memconservative
# 自动更新 GEO
geo-auto-update: true
# 更新间隔，单位为小时
geo-update-interval: 24
geox-url:
  geoip: 'https://mirror.ghproxy.com/https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat'
  geosite: 'https://mirror.ghproxy.com/https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat'
  mmdb: 'https://gitlab.com/Masaiki/GeoIP2-CN/-/raw/release/Country.mmdb'
  asn: 'https://mirror.ghproxy.com/https://github.com/xishang0128/geoip/releases/download/latest/GeoLite2-ASN.mmdb'

profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true 
  # 持久化 fake-ip 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true  

# 嗅探域名
sniffer:               
  # 是否启用嗅探
  enable: true
  # 对 redir-host 类型识别的流量进行强制嗅探
  force-dns-mapping: true
  # 对所有未获取到域名的流量进行强制嗅探
  parse-pure-ip: true
  # 是否使用嗅探结果作为实际访问，默认为 true
  # override-destination: true
  sniff:
    HTTP:
      # ports字段，表示端口范围。示例：ports: [80, 8080-8880]
      ports: [80, 8080-8880]
      # override-destination字段（可选），用于覆盖全局override-destination设置
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  # 需要强制嗅探的域名（默认情况下只对IP进行嗅探）
  force-domain:
    - +.v2ex.com
  # 需要跳过嗅探的域名。主要解决部分站点sni字段非域名，导致嗅探结果异常的问题，如米家设备Mijia Cloud
  skip-domain:
    - +.push.apple.com
    - Mijia Cloud
    - dlg.io.mi.com

# Tun 配置  
tun:
  enable: false
  # tun 模式堆栈,可用值：system/gvisor/mixed
  stack: mixed
  # dns劫持,一般设置为 any:53 即可, 即劫持所有53端口的udp流量
  dns-hijack: [any:53]
  # 自动设置全局路由，可以自动将全局流量路由进入tun网卡。
  auto-route: true
  # 自动选择流量出口接口，多出口网卡同时连接的设备建议手动指定出口网卡
  auto-detect-interface: true

dns:
  enable: true
  #缓存算法: lru: 最近最少使用 arc: 自适应替换缓存
  cache-algorithm: arc
  # 优先使用 DOH 的 http/3
  # prefer-h3: true
  # 是否解析 IPV6, 如为 false, 则回应 AAAA 的空解析
  ipv6: true
  # DNS处理模式，可选值 normal/fake-ip/redir-host
  enhanced-mode: fake-ip
  # DNS监听地址，仅支持 udp
  listen: 0.0.0.0:1053
  # Fake-IP解析地址池
  fake-ip-range: 28.0.0.1/8
  # fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
  fake-ip-filter: ['*.lan','*.direct', cable.auth.com, '*.msftconnecttest.com', '*.msftncsi.com', network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, '*.srv.nintendo.net', '*.stun.playstation.net', 'xbox.*.microsoft.com', '*.xboxlive.com', 'stun.*', global.turn.twilio.com, global.stun.twilio.com, app.yinxiang.com, injections.adguard.org, local.adguard.org, cable.auth.com, 'localhost.*.qq.com', 'localhost.*.weixin.qq.com', '*.logon.battlenet.com.cn', '*.logon.battle.net', '*.blzstatic.cn', 'music.163.com', '*.music.163.com', '*.126.net', musicapi.taihe.com, music.taihe.com, songsearch.kugou.com, trackercdn.kugou.com, '*.kuwo.cn', api-jooxtt.sanook.com, api.joox.com, joox.com, y.qq.com, '*.y.qq.com', streamoc.music.tc.qq.com, mobileoc.music.tc.qq.com, isure.stream.qqmusic.qq.com, dl.stream.qqmusic.qq.com, aqqmusic.tc.qq.com, amobile.music.tc.qq.com, '*.xiami.com', '*.music.migu.cn', music.migu.cn, proxy.golang.org, '*.mcdn.bilivideo.cn', '*.cmpassport.com', id6.me, 'open.e.189.cn', mdn.open.wo.cn, opencloud.wostore.cn, auth.wosms.cn, '*.jegotrip.com.cn', '*.icitymobile.mobi', '*.pingan.com.cn', '*.cmbchina.com', '*.10099.com.cn', pool.ntp.org, '*.pool.ntp.org', 'ntp.*.com', 'time.*.com', 'ntp?.*.com', 'time?.*.com', 'time.*.gov', 'time.*.edu.cn', '*.ntp.org.cn', 'PDC._msDCS.*.*', 'DC._msDCS.*.*', 'GC._msDCS.*.*']
  # fake-ip-filter": ['+.*']
  # 默认 DNS, 用于解析 DNS 服务器 的域名,只支持纯 IP
  default-nameserver: [223.5.5.5, 180.184.1.1]
  # 默认的域名解析服务器，如不配置 fallback/proxy-server-nameserver , 则所有域名都由 nameserver 解析
  nameserver: [https://dns.alidns.com/dns-query, https://doh.pub/dns-query]
  # 代理节点域名解析服务器，仅用于解析代理节点的域名
  proxy-server-nameserver: [https://doh.pub/dns-query]
  # 指定域名查询的解析服务器，可使用 geosite, 优先于 nameserver/fallback 查询
  nameserver-policy:
    #'geosite:cn': system
    'geosite:private,cn,apple': [https://dns.alidns.com/dns-query, https://doh.pub/dns-query]
    'geosite:category-ads-all': rcode://success
    'www.baidu.com,+.google.cn': [223.5.5.5, https://dns.alidns.com/dns-query]
    #'geosite:gfw,geolocation-!cn': [https://dns.cloudflare.com/dns-query, https://dns.google/dns-query]

# 锚点 - 节点订阅的参数 [每12小时更新一次订阅节点，每 300 秒一次健康检查]
NodeParam: &NodeParam {type: http, interval: 42300, health-check: {enable: true, url: 'http://www.apple.com/library/test/success.html', interval: 300}}

# 锚点 - 节点订阅
proxy-providers: 
  机场名称1:
    url: '机场1的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称1.yaml'
    override:
      additional-prefix: "[机场名称1] " # 为订阅节点添加机场名称前缀
  机场名称2:
    url: '机场2的订阅URL'
    <<: *NodeParam
    path: './proxy_providers/机场名称2.yaml'
    override:
      additional-prefix: "[机场名称2] " # 为订阅节点添加机场名称前缀

# 锚点 - 节点筛选组
FilterCY: &FilterCY '^(?=.*((?i)HKG|Hong Kong|香港 IEPL|香港高级|高级 专线 香港)).*$'
FilterHK: &FilterHK '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b)))(?!.*((?i)标准|回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterTW: &FilterTW '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)))(?!.*((?i)标准|回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterJP: &FilterJP '^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)))(?!.*((?i)标准|回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterKR: &FilterKR '^(?=.*((?i)🇰🇷|韩国|韓|首尔|(\b(KR|Korea)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterSG: &FilterSG '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)标准|回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUS: &FilterUS '^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)标准|回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterUK: &FilterUK '^(?=.*((?i)🇬🇧|英国|伦敦|(\b(UK|United Kingdom)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterFR: &FilterFR '^(?=.*((?i)🇫🇷|法国|(\b(FR|France)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterDE: &FilterDE '^(?=.*((?i)🇩🇪|德国|(\b(DE|Germany)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterGame: &FilterGame '^(?=.*((?i)游戏|🎮|(\b(GAME)\b)))(?!.*((?i)回国|校园)).*$'
FilterStreaming:: &FilterStreaming '^(?=.*((?i)🇭🇰|香港|🇹🇼|台湾|🇯🇵|日本|川日|东京|大阪|泉日|埼玉|🇸🇬|新加坡|狮|🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(HK|Hong|TW|Tai|Taiwan|JP|Japan|SG|Singapore|US|United States)\b)))(?!.*((?i)标准|回国|校园|游戏|🎮|(\b(GAME)\b))).*$'
FilterFinal: &FilterFinal '^(?=.*(.))(?!.*((?i)🇭🇰|香港|🇹🇼|台湾|🇯🇵|日本|川日|东京|大阪|泉日|埼玉|🇸🇬|新加坡|狮|🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|🇰🇷|韩国|韓|首尔|🇬🇧|英国|伦敦|🇫🇷|法国|🇩🇪|德国|游戏|🎮|群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(HK|Hong|TW|Tai|Taiwan|JP|Japan|SG|Singapore|US|United States|KR|Korea|UK|United Kingdom|FR|France|DE|Germany|GAME|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|Traffic)\b|(\d{4}-\d{2}-\d{2}|\d+G)))).*$'
FilterAll: &FilterAll '^(?=.*(.))(?!.*((?i)群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|使用|提示|特别|访问|支持|教程|关注|更新|作者|加入|(\b(USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|Traffic)\b|(\d{4}-\d{2}-\d{2}|\d+G)))).*$'

# 锚点 - 策略筛选组
#Select: &Select {type: select, proxies: [节点选择, 负载均衡, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略，DIRECT]}

# 策略组参数锚点
# 锚点 - 时延优选参数 [每 300 秒一次惰性健康检查，容差 20ms，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
UrlTest: &UrlTest {type: url-test, interval: 300, tolerance: 20, lazy: true, url: 'http://www.apple.com/library/test/success.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: false, include-all-providers: true}
# 锚点 - 故障转移参数 [每 300 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
FallBack: &FallBack {type: fallback, interval: 300, lazy: true, url: 'http://www.apple.com/library/test/success.html', disable-udp: false, timeout: 2000, max-failed-times: 3, hidden: false, include-all-providers: true}
# 锚点 - 负载均衡参数 [每 300 秒一次惰性健康检查，时延超过 2 秒判定为失败，失败 3 次则自动触发健康检查]
LoadBalance: &LoadBalance {type: load-balance, interval: 300, lazy: true, url: 'http://www.apple.com/library/test/success.html', disable-udp: false, strategy: consistent-hashing, timeout: 2000, max-failed-times: 3, hidden: false, include-all-providers: true}

# 锚点 - 规则参数 [每12小时更新一次订阅规则]
RuleProvidersYaml: &RuleProvidersYaml {type: http, behavior: classical, interval: 42300, format: yaml}

RuleProvidersText: &RuleProvidersText {type: http, behavior: classical, interval: 42300, format: text}

RuleProvidersDomain: &RuleProvidersDomain {type: http, behavior: domain, interval: 42300, format: mrs}

RuleProvidersIpcidr: &RuleProvidersIpcidr {type: http, behavior: ipcidr, interval: 42300, format: mrs}

# 策略组
proxy-groups: 
  - {name: 节点选择, type: select, proxies: [手动切换, 自动选择, 负载均衡, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Available.png}
  - {name: 手动切换, type: select, include-all-providers: true, filter: *FilterAll, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Area.png}
  - {name: 自动选择, <<: *UrlTest, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png}
  - {name: 负载均衡, <<: *LoadBalance, filter: *FilterCY, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Round_Robin.png}
  - {name: ProxyDNS, type: select, proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Server.png}
  - {name: 国际CDN下载, type: select, include-all-providers: true, filter: "(?i)实验性", proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Download.png}
  - {name: 苹果服务, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_1.png}
  - {name: 微软云盘, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/OneDrive.png}
  - {name: 微软服务, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png}
  - {name: 谷歌推送, type: select, proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png}
  - {name: 谷歌服务, type: select, proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png}
  - {name: 国际电商, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Amazon.png}
  - {name: 电报消息, type: select, proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png}
  - {name: OpenAi, type: select, include-all-providers: true, filter: *FilterUS, proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/ChatGPT.png}
  - {name: 油管视频, type: select, proxies: [节点选择, 手动切换, 🔽油管节点, 🔽冷门节点, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png}
  - {name: 奈飞视频, type: select, proxies: [节点选择, 手动切换, 🔽奈飞节点, 🔽冷门节点, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netflix.png}
  - {name: Disney视频, type: select, proxies: [节点选择, 手动切换, 🔽Disney节点, 🔽冷门节点, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Disney+.png}
  - {name: 巴哈姆特, type: select, proxies: [节点选择, 手动切换, 台湾策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Bahamut.png}
  - {name: TikTok, type: select, include-all-providers: true, filter: "(?i)实验性", proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/TikTok.png}
  - {name: PikPak, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽油管节点, 🔽奈飞节点, 🔽Disney节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili_2.png}
  - {name: EmbyProxy, type: select, proxies: [DIRECT, 节点选择, 手动切换, 🔽Emby节点, 🔽冷门节点, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Emby.png}
  - {name: 哔哩哔哩东南亚, type: select, include-all-providers: true, filter: "(?i)实验性", proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili.png}
  - {name: 哔哩哔哩, type: select, proxies: [DIRECT, 香港策略, 台湾策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/bilibili_3.png}
  - {name: 网易音乐, type: select, include-all-providers: true, filter: "(?i)网易|音乐|解锁|Music|NetEase", proxies: [DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Netease_Music.png}
  - {name: 国内媒体, type: select, proxies: [DIRECT, 香港策略, 台湾策略], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/StreamingCN.png}
  - {name: 国际媒体, type: select, include-all-providers: true, filter: "(?i)实验性", proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽油管节点, 🔽奈飞节点, 🔽Disney节点, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Streaming!CN.png}
  - {name: Nintendo, type: select, include-all-providers: true, filter: *FilterGame, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Nintendo.png}
  - {name: 游戏平台, type: select, include-all-providers: true, filter: *FilterGame, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Game.png}
  - {name: 1Password, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://1password.com/img/favicon/apple-touch-icon-v2.png}
  - {name: ESET, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略], icon: https://www.eset.com/typo3conf/ext/eset_base/Resources/Public/img/device/apple-touch-icon.png}
  - {name: Speedtest, type: select, proxies: [DIRECT, 节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, 🔽油管节点, 🔽奈飞节点, 🔽Disney节点, 🔽冷门节点], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Speedtest.png}
  - {name: Developer, type: select, proxies: [节点选择, 手动切换, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/GitHub.png}
  - {name: 全球直连, type: select, proxies: [DIRECT, 节点选择, 手动切换], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Global.png}
  - {name: 广告拦截, type: select, proxies: [REJECT, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Advertising.png}
  - {name: 应用净化, type: select, proxies: [REJECT, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hijacking.png}
  - {name: 漏网之鱼, type: select, proxies: [节点选择, 手动切换, 负载均衡, 香港策略, 台湾策略, 日本策略, 韩国策略, 新国策略, 美国策略, 英国策略, 法国策略, 德国策略, DIRECT], icon: https://raw.githubusercontent.com/shindgewongxj/WHATSINStash/main/icon/fallback.png}

  - {name: 香港策略, type: select, proxies: [⏱香港时延优选策略组, 🚥香港故障转移策略组, 🎛香港负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png}
  - {name: 台湾策略, type: select, proxies: [⏱台湾时延优选策略组, 🚥台湾故障转移策略组, 🎛台湾负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png}
  - {name: 日本策略, type: select, proxies: [⏱日本时延优选策略组, 🚥日本故障转移策略组, 🎛日本负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png}
  - {name: 韩国策略, type: select, proxies: [⏱韩国时延优选策略组, 🚥韩国故障转移策略组, 🎛韩国负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Korea.png}
  - {name: 新国策略, type: select, proxies: [⏱新国时延优选策略组, 🚥新国故障转移策略组, 🎛新国负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png}
  - {name: 美国策略, type: select, proxies: [⏱美国时延优选策略组, 🚥美国故障转移策略组, 🎛美国负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png}
  - {name: 英国策略, type: select, proxies: [⏱英国时延优选策略组, 🚥英国故障转移策略组, 🎛英国负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_Kingdom.png}
  - {name: 法国策略, type: select, proxies: [⏱法国时延优选策略组, 🚥法国故障转移策略组, 🎛法国负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/France.png}
  - {name: 德国策略, type: select, proxies: [⏱德国时延优选策略组, 🚥德国故障转移策略组, 🎛德国负载均衡策略组], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Germany.png}

  - {name: 🔽油管节点, type: select, include-all-providers: true, filter: *FilterStreaming}
  - {name: 🔽奈飞节点, type: select, include-all-providers: true, filter: *FilterStreaming}
  - {name: 🔽Disney节点, type: select, include-all-providers: true, filter: *FilterStreaming}
  - {name: 🔽Emby节点, type: select, include-all-providers: true, filter: *FilterStreaming}
  - {name: 🔽冷门节点, type: select, include-all-providers: true, filter: *FilterFinal}

# 时延优选策略组
  - {name: ⏱香港时延优选策略组, <<: *UrlTest, filter: *FilterHK}
  - {name: ⏱台湾时延优选策略组, <<: *UrlTest, filter: *FilterTW}
  - {name: ⏱日本时延优选策略组, <<: *UrlTest, filter: *FilterJP}
  - {name: ⏱韩国时延优选策略组, <<: *UrlTest, filter: *FilterKR}
  - {name: ⏱新国时延优选策略组, <<: *UrlTest, filter: *FilterSG}
  - {name: ⏱美国时延优选策略组, <<: *UrlTest, filter: *FilterUS}
  - {name: ⏱英国时延优选策略组, <<: *UrlTest, filter: *FilterUK}
  - {name: ⏱法国时延优选策略组, <<: *UrlTest, filter: *FilterFR}
  - {name: ⏱德国时延优选策略组, <<: *UrlTest, filter: *FilterDE}

# 故障转移策略组
  - {name: 🚥香港故障转移策略组, <<: *FallBack, filter: *FilterHK}
  - {name: 🚥台湾故障转移策略组, <<: *FallBack, filter: *FilterTW}
  - {name: 🚥日本故障转移策略组, <<: *FallBack, filter: *FilterJP}
  - {name: 🚥韩国故障转移策略组, <<: *FallBack, filter: *FilterKR}
  - {name: 🚥新国故障转移策略组, <<: *FallBack, filter: *FilterSG}
  - {name: 🚥美国故障转移策略组, <<: *FallBack, filter: *FilterUS}
  - {name: 🚥英国故障转移策略组, <<: *FallBack, filter: *FilterUK}
  - {name: 🚥法国故障转移策略组, <<: *FallBack, filter: *FilterFR}
  - {name: 🚥德国故障转移策略组, <<: *FallBack, filter: *FilterDE}

# 负载均衡策略组
  - {name: 🎛香港负载均衡策略组, <<: *LoadBalance, filter: *FilterHK}
  - {name: 🎛台湾负载均衡策略组, <<: *LoadBalance, filter: *FilterTW}
  - {name: 🎛日本负载均衡策略组, <<: *LoadBalance, filter: *FilterJP}
  - {name: 🎛韩国负载均衡策略组, <<: *LoadBalance, filter: *FilterKR}
  - {name: 🎛新国负载均衡策略组, <<: *LoadBalance, filter: *FilterSG}
  - {name: 🎛美国负载均衡策略组, <<: *LoadBalance, filter: *FilterUS}
  - {name: 🎛英国负载均衡策略组, <<: *LoadBalance, filter: *FilterUK}
  - {name: 🎛法国负载均衡策略组, <<: *LoadBalance, filter: *FilterFR}
  - {name: 🎛德国负载均衡策略组, <<: *LoadBalance, filter: *FilterDE}

# 订阅规则
rule-providers:
  Lan:
    <<: *RuleProvidersYaml
    path: './rules/Lan.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan_No_Resolve.yaml'

  Direct:
    <<: *RuleProvidersYaml
    path: './rules/Direct.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Direct/Direct_No_Resolve.yaml'

  BanAD:
    <<: *RuleProvidersText
    path: './rules/BanAD.list'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list'

  BanProgramAD:
    <<: *RuleProvidersText
    path: './rules/BanProgramAD.list'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list'

  BlockHttpDNS:
    <<: *RuleProvidersYaml
    path: './rules/BlockHttpDNS.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BlockHttpDNS/BlockHttpDNS_No_Resolve.yaml'

#  DNSlist:
#    <<: *RuleProvidersYaml
#    path: './rules/DNSlist.yaml'
#    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/DNS/DNS_No_Resolve.yaml'

#  SteamCN:
#    <<: *RuleProvidersYaml
#    path: './rules/SteamCN.yaml'
#    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN_No_Resolve.yaml'

  ChinaDownloadCDN:
    <<: *RuleProvidersYaml
    path: './rules/ChinaDownloadCDN.yaml'
    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/ChinaDownloadCDN.yaml'

  InternationalDownloadCDN:
    <<: *RuleProvidersYaml
    path: './rules/InternationalDownloadCDN.yaml'
    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/InternationalDownloadCDN.yaml'

  OpenAI:
    <<: *RuleProvidersYaml
    path: './rules/OpenAI.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI_No_Resolve.yaml'

  AI:
    <<: *RuleProvidersYaml
    path: './rules/AI.yaml'
    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/AI.yaml'

  Nintendo:
    <<: *RuleProvidersYaml
    path: './rules/Nintendo.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Nintendo/Nintendo_No_Resolve.yaml'

  Game:
    <<: *RuleProvidersYaml
    path: './rules/Game.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/Game_No_Resolve.yaml'

  YouTube:
    <<: *RuleProvidersYaml
    path: './rules/YouTube.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube_No_Resolve.yaml'

  Netflix:
    <<: *RuleProvidersYaml
    path: './rules/Netflix.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix_Classical_No_Resolve.yaml'

  Disney:
    <<: *RuleProvidersYaml
    path: './rules/Disney.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Disney/Disney_No_Resolve.yaml'

  Bahamut:
    <<: *RuleProvidersYaml
    path: './rules/Bahamut.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Bahamut/Bahamut_No_Resolve.yaml'

  TikTok:
    <<: *RuleProvidersYaml
    path: './rules/TikTok.yaml'
    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/TikTok.yaml'

  PikPak:
    <<: *RuleProvidersYaml
    path: './rules/PikPak.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PikPak/PikPak_No_Resolve.yaml'

  Emby:
    <<: *RuleProvidersYaml
    path: './rules/Emby.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Emby/Emby_No_Resolve.yaml'

  Emby_Nebula:
    <<: *RuleProvidersText
    path: './rules/Emby_Nebula.list'
    url: 'https://raw.githubusercontent.com/Pegasus02/Clash_Rules/main/list/Nebula.list'

  Emby_ddgksf2013:
    <<: *RuleProvidersText
    path: './rules/Emby_ddgksf2013.list'
    url: 'https://raw.githubusercontent.com/ddgksf2013/Filter/master/Emby.list'

  BiliBiliIntl:
    <<: *RuleProvidersYaml
    path: './rules/BiliBiliIntl.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBiliIntl/BiliBiliIntl_No_Resolve.yaml'

  BiliBili:
    <<: *RuleProvidersYaml
    path: './rules/BiliBili.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili_No_Resolve.yaml'

  NetEaseMusic:
    <<: *RuleProvidersYaml
    path: './rules/NetEaseMusic.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/NetEaseMusic/NetEaseMusic_No_Resolve.yaml'

#美国数据中心
  1Password:
    <<: *RuleProvidersYaml
    path: './rules/1PasswordUS.yaml'
    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/1PasswordUS.yaml'

#欧盟数据中心
#  1Password:
#    <<: *RuleProvidersYaml
#    path: './rules/1PasswordEU.yaml'
#    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/1PasswordEU.yaml'

#加拿大数据中心
#  1Password:
#    <<: *RuleProvidersYaml
#    path: './rules/1PasswordCA.yaml'
#    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/1PasswordCA.yaml'

  ESET_China:
    <<: *RuleProvidersYaml
    path: './rules/ESET_China.yaml'
    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/ESET_China.yaml'

  Speedtest:
    <<: *RuleProvidersYaml
    path: './rules/Speedtest.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Speedtest/Speedtest_No_Resolve.yaml'

  Developer:
    <<: *RuleProvidersYaml
    path: './rules/Developer.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Developer/Developer_No_Resolve.yaml'

  GitHub:
    <<: *RuleProvidersYaml
    path: './rules/GitHub.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub_No_Resolve.yaml'

  GitBook:
    <<: *RuleProvidersYaml
    path: './rules/GitBook.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitBook/GitBook_No_Resolve.yaml'

  Docker:
    <<: *RuleProvidersYaml
    path: './rules/Docker.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Docker/Docker_No_Resolve.yaml'

  GlobalScholar:
    <<: *RuleProvidersYaml
    path: './rules/GlobalScholar.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalScholar/GlobalScholar_No_Resolve.yaml'

  Apple:
    <<: *RuleProvidersYaml
    path: './rules/Apple.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical_No_Resolve.yaml'

  OneDrive:
    <<: *RuleProvidersYaml
    path: './rules/OneDrive.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OneDrive/OneDrive_No_Resolve.yaml'

  Microsoft:
    <<: *RuleProvidersYaml
    path: './rules/Microsoft.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft_No_Resolve.yaml'

  GoogleFCM:
    <<: *RuleProvidersYaml
    path: './rules/GoogleFCM.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GoogleFCM/GoogleFCM_No_Resolve.yaml'

#  GoogleCN:
#    <<: *RuleProvidersText
#    path: './rules/GoogleCN.list'
#    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GoogleCN.list'

  Google:
    <<: *RuleProvidersYaml
    path: './rules/Google.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google_No_Resolve.yaml'

  AmazonCN:
    <<: *RuleProvidersYaml
    path: './rules/AmazonCN.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/AmazonCN/AmazonCN_No_Resolve.yaml'

  Amazon:
    <<: *RuleProvidersYaml
    path: './rules/Amazon.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Amazon/Amazon_No_Resolve.yaml'

  eBay:
    <<: *RuleProvidersYaml
    path: './rules/eBay.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/eBay/eBay_No_Resolve.yaml'

  Bestbuy:
    <<: *RuleProvidersYaml
    path: './rules/Bestbuy.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Bestbuy/Bestbuy_No_Resolve.yaml'

  Shopify:
    <<: *RuleProvidersYaml
    path: './rules/Shopify.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Shopify/Shopify_No_Resolve.yaml'

  Telegram:
    <<: *RuleProvidersYaml
    path: './rules/Telegram.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram_No_Resolve.yaml'

#  Telegram_lodepuly:
#    <<: *RuleProvidersYaml
#    path: './rules/Telegram_lodepuly.yaml'
#    url: 'https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Clash/Rule/Telegram.yaml'

  ChinaMedia:
    <<: *RuleProvidersYaml
    path: './rules/ChinaMedia.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMedia/ChinaMedia_No_Resolve.yaml'

  GlobalMedia:
    <<: *RuleProvidersYaml
    path: './rules/GlobalMedia.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GlobalMedia/GlobalMedia_Classical_No_Resolve.yaml'

#  geolocation-!cn@cn:
#    <<: *RuleProvidersText
#    path: './rules/geolocation-!cn@cn.txt'
#    url: 'https://raw.githubusercontent.com/yuumimi/rules/release/clash/geolocation-!cn@cn.txt'

#  cn@!cn:
#    <<: *RuleProvidersText
#    path: './rules/cn@!cn.txt'
#    url: 'https://raw.githubusercontent.com/yuumimi/rules/release/clash/cn@!cn.txt'

#  PrivateTracker:
#    <<: *RuleProvidersYaml
#    path: './rules/PrivateTracker.yaml'
#    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PrivateTracker/PrivateTracker_No_Resolve.yaml'

  category-pt:
    type: http
    behavior: domain
    url: "https://raw.githubusercontent.com/ixff/clash-rules/release/category-pt.txt"
    path: ./rules/category-pt.yaml
    interval: 42300

#  geolocation-!cn:
#    <<: *RuleProvidersText
#    path: './rules/geolocation-!cn.txt'
#    url: 'https://raw.githubusercontent.com/yuumimi/rules/release/clash/geolocation-!cn.txt'

#  cn:
#    <<: *RuleProvidersText
#    path: './rules/cn.txt'
#    url: 'https://raw.githubusercontent.com/yuumimi/rules/release/clash/cn.txt'

  ChinaCompanyIp:
    <<: *RuleProvidersText
    path: './rules/ChinaCompanyIp.list'
    url: 'https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list'

  Download:
    <<: *RuleProvidersYaml
    path: './rules/Download.yaml'
    url: 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Download/Download_No_Resolve.yaml'


# 规则指向
rules:
  - RULE-SET, Lan, DIRECT
  - RULE-SET, Direct, 全球直连
  - RULE-SET, BanAD, 广告拦截
  - GEOSITE,category-ads-all,广告拦截
  - RULE-SET, BanProgramAD, 应用净化
  - RULE-SET, BlockHttpDNS, 应用净化
  - RULE-SET, ChinaDownloadCDN, 全球直连
  - RULE-SET, InternationalDownloadCDN, 国际CDN下载
  - RULE-SET, OpenAI, OpenAi
  - RULE-SET, AI, OpenAi
  - RULE-SET, Nintendo, Nintendo
  - RULE-SET, Game, 游戏平台
  - RULE-SET, YouTube, 油管视频
  - RULE-SET, Netflix, 奈飞视频
  - RULE-SET, Disney, Disney视频
  - RULE-SET, Bahamut, 巴哈姆特
  - RULE-SET, TikTok, TikTok
  - DOMAIN-SUFFIX,user.mypikpak.com, 国际媒体
  - DOMAIN-SUFFIX,rcv5-sp.mypikpak.com, 国际媒体
  - DOMAIN-SUFFIX,config.mypikpak.com, 国际媒体
  - DOMAIN-SUFFIX,api-drive.mypikpak.com, 国际媒体
  - DOMAIN-SUFFIX,access.mypikpak.com, 国际媒体
  - DOMAIN-SUFFIX,hubciddata.mypikpak.com, 国际媒体
  - RULE-SET, PikPak, PikPak
  - RULE-SET, Emby, EmbyProxy
  - RULE-SET, Emby_Nebula, EmbyProxy
  - RULE-SET, Emby_ddgksf2013, EmbyProxy
  - RULE-SET, BiliBiliIntl, 哔哩哔哩东南亚
  - RULE-SET, BiliBili, 哔哩哔哩
  - RULE-SET, NetEaseMusic, 网易音乐
  - RULE-SET, 1Password, 1Password
  - RULE-SET, ESET_China, ESET
  - RULE-SET, Speedtest, Speedtest
  - RULE-SET, Developer, Developer
  - RULE-SET, GitHub, Developer
  - RULE-SET, GitBook, Developer
  - RULE-SET, Docker, Developer
  - RULE-SET, GlobalScholar, Developer
  - RULE-SET, Apple, 苹果服务
  - RULE-SET, OneDrive, 微软云盘
  - RULE-SET, Microsoft, 微软服务
  - RULE-SET, GoogleFCM, 谷歌推送
#  - RULE-SET, GoogleCN, 全球直连
  - RULE-SET, Google, 谷歌服务
  - RULE-SET, AmazonCN, 全球直连
  - RULE-SET, Amazon, 国际电商
  - RULE-SET, eBay, 国际电商
  - RULE-SET, Bestbuy, 国际电商
  - RULE-SET, Shopify, 国际电商
  - RULE-SET, Telegram, 电报消息
#  - RULE-SET, Telegram_lodepuly, 电报消息
  - RULE-SET, ChinaMedia, 国内媒体
  - RULE-SET, GlobalMedia, 国际媒体
#  - RULE-SET, geolocation-!cn@cn, 全球直连
#  - RULE-SET, cn@!cn, 节点选择
# Transmission检测地址
  - DOMAIN-SUFFIX,portcheck.transmissionbt.com, 全球直连
  - DOMAIN-SUFFIX,fsm.name, 国际媒体
#  - RULE-SET, PrivateTracker, 全球直连
  - RULE-SET, category-pt, 全球直连
#  - RULE-SET, geolocation-!cn, 节点选择
  - GEOSITE, geolocation-!cn, 节点选择
#  - RULE-SET, cn, 全球直连
  - GEOSITE, cn, 全球直连
  - RULE-SET, ChinaCompanyIp, 全球直连
  - RULE-SET, Download, 全球直连
  - GEOIP, CN, 全球直连
  - MATCH, 漏网之鱼
